use crate::span::Span;
use std::fmt;

#[derive(Clone, Copy)]
pub(crate) struct Token {
    pub(crate) kind: TokenKind,
    pub(crate) span: Span,
}

impl Token {
    pub(crate) const fn new(kind: TokenKind, span: Span) -> Self {
        Self { kind, span }
    }
}

impl fmt::Debug for Token {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{:?}@{:?}", self.kind, self.span)
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Debug)]
pub(crate) enum TokenKind {
    Abstract,
    AmpersandEquals,
    As,
    AsteriskEquals,
    Async,
    At,
    Await,
    BangEquals,
    Become,
    BlockComment,
    Box,
    Break,
    CaretEquals,
    CharLit,
    CloseCurlyBracket,
    CloseRoundBracket,
    CloseSquareBracket,
    Comma,
    Const,
    Continue,
    Crate,
    Do,
    DoubleAmpersand,
    DoubleColon,
    DoubleDot,
    DoubleDotEquals,
    DoubleEquals,
    DoubleGreaterThan,
    DoubleGreaterThanEquals,
    DoubleLessThan,
    DoubleLessThanEquals,
    DoublePipe,
    Dyn,
    Else,
    EndOfInput,
    Enum,
    Error,
    Extern,
    False,
    Final,
    Fn,
    For,
    Gen,
    GreaterThanEquals,
    Hash,
    HypenEquals,
    Ident,
    If,
    Impl,
    In,
    LessThanEquals,
    Let,
    Lifetime,
    LineComment,
    Loop,
    Macro,
    Match,
    Mod,
    Move,
    Mut,
    NumLit,
    OpenCurlyBracket,
    OpenRoundBracket,
    OpenSquareBracket,
    Override,
    PercentEquals,
    PipeEquals,
    PlusEquals,
    Priv,
    Pub,
    QuestionMark,
    Ref,
    Return,
    SelfLower,
    SelfUpper,
    Semicolon,
    SingleAmpersand,
    SingleAsterisk,
    SingleBang,
    SingleCaret,
    SingleColon,
    SingleDot,
    SingleEquals,
    SingleGreaterThan,
    SingleHyphen,
    SingleLessThan,
    SinglePercent,
    SinglePipe,
    SinglePlus,
    SingleSlash,
    SlashEquals,
    Static,
    StrLit,
    Struct,
    Super,
    ThinArrow,
    Trait,
    TripleDot,
    True,
    Try,
    Type,
    Typeof,
    Underscore,
    Unsafe,
    Use,
    Virtual,
    Where,
    While,
    Whitespace,
    WideArrow,
    Yield,
}

impl TokenKind {
    pub(crate) fn repr(self) -> Repr {
        match self {
            Self::Abstract => Repr::Src("abstract"),
            Self::AmpersandEquals => Repr::Src("&="),
            Self::As => Repr::Src("as"),
            Self::AsteriskEquals => Repr::Src("*="),
            Self::Async => Repr::Src("async"),
            Self::At => Repr::Src("@"),
            Self::Await => Repr::Src("await"),
            Self::BangEquals => Repr::Src("!="),
            Self::Become => Repr::Src("become"),
            Self::BlockComment => Repr::Tag("block comment"),
            Self::Box => Repr::Src("box"),
            Self::Break => Repr::Src("break"),
            Self::CaretEquals => Repr::Src("^="),
            Self::CharLit => Repr::Tag("char literal"),
            Self::CloseCurlyBracket => Repr::Src("}"),
            Self::CloseRoundBracket => Repr::Src(")"),
            Self::CloseSquareBracket => Repr::Src("]"),
            Self::Comma => Repr::Src(","),
            Self::Const => Repr::Src("const"),
            Self::Continue => Repr::Src("continue"),
            Self::Crate => Repr::Src("crate"),
            Self::Do => Repr::Src("do"),
            Self::DoubleAmpersand => Repr::Src("&&"),
            Self::DoubleColon => Repr::Src("::"),
            Self::DoubleDot => Repr::Src(".."),
            Self::DoubleDotEquals => Repr::Src("..="),
            Self::DoubleEquals => Repr::Src("=="),
            Self::DoubleGreaterThan => Repr::Src(">>"),
            Self::DoubleGreaterThanEquals => Repr::Src(">>="),
            Self::DoubleLessThan => Repr::Src("<<"),
            Self::DoubleLessThanEquals => Repr::Src("<<="),
            Self::DoublePipe => Repr::Src("||"),
            Self::Dyn => Repr::Src("dyn"),
            Self::Else => Repr::Src("else"),
            Self::EndOfInput => Repr::Tag("end of input"),
            Self::Enum => Repr::Src("enum"),
            Self::Error => Repr::Tag("error"),
            Self::Extern => Repr::Src("extern"),
            Self::False => Repr::Src("false"),
            Self::Final => Repr::Src("final"),
            Self::Fn => Repr::Src("fn"),
            Self::For => Repr::Src("for"),
            Self::Gen => Repr::Src("gen"),
            Self::GreaterThanEquals => Repr::Src(">="),
            Self::Hash => Repr::Src("#"),
            Self::HypenEquals => Repr::Src("-="),
            Self::Ident => Repr::Tag("identifier"),
            Self::If => Repr::Src("if"),
            Self::Impl => Repr::Src("impl"),
            Self::In => Repr::Src("in"),
            Self::LessThanEquals => Repr::Src("`<=`"),
            Self::Let => Repr::Src("let"),
            Self::Lifetime => Repr::Tag("lifetime"),
            Self::LineComment => Repr::Tag("line comment"),
            Self::Loop => Repr::Src("loop"),
            Self::Macro => Repr::Src("macro"),
            Self::Match => Repr::Src("match"),
            Self::Mod => Repr::Src("mod"),
            Self::Move => Repr::Src("move"),
            Self::Mut => Repr::Src("mut"),
            Self::NumLit => Repr::Tag("number literal"),
            Self::OpenCurlyBracket => Repr::Src("{"),
            Self::OpenRoundBracket => Repr::Src("("),
            Self::OpenSquareBracket => Repr::Src("["),
            Self::Override => Repr::Src("override"),
            Self::PercentEquals => Repr::Src("%="),
            Self::PipeEquals => Repr::Src("|="),
            Self::PlusEquals => Repr::Src("+="),
            Self::Priv => Repr::Src("priv"),
            Self::Pub => Repr::Src("pub"),
            Self::QuestionMark => Repr::Src("?"),
            Self::Ref => Repr::Src("ref"),
            Self::Return => Repr::Src("return"),
            Self::SelfLower => Repr::Src("self"),
            Self::SelfUpper => Repr::Src("Self"),
            Self::Semicolon => Repr::Src(";"),
            Self::SingleAmpersand => Repr::Src("&"),
            Self::SingleAsterisk => Repr::Src("*"),
            Self::SingleBang => Repr::Src("!"),
            Self::SingleCaret => Repr::Src("^"),
            Self::SingleColon => Repr::Src(":"),
            Self::SingleDot => Repr::Src("."),
            Self::SingleEquals => Repr::Src("="),
            Self::SingleGreaterThan => Repr::Src(">"),
            Self::SingleHyphen => Repr::Src("-"),
            Self::SingleLessThan => Repr::Src("<"),
            Self::SinglePercent => Repr::Src("%"),
            Self::SinglePipe => Repr::Src("|"),
            Self::SinglePlus => Repr::Src("+"),
            Self::SingleSlash => Repr::Src("/"),
            Self::SlashEquals => Repr::Src("/="),
            Self::Static => Repr::Src("static"),
            Self::StrLit => Repr::Tag("string literal"),
            Self::Struct => Repr::Src("struct"),
            Self::Super => Repr::Src("super"),
            Self::ThinArrow => Repr::Src("->"),
            Self::Trait => Repr::Src("trait"),
            Self::TripleDot => Repr::Src("..."),
            Self::True => Repr::Src("true"),
            Self::Try => Repr::Src("try"),
            Self::Type => Repr::Src("type"),
            Self::Typeof => Repr::Src("typeof"),
            Self::Underscore => Repr::Src("_"),
            Self::Unsafe => Repr::Src("unsafe"),
            Self::Use => Repr::Src("use"),
            Self::Virtual => Repr::Src("virtual"),
            Self::Where => Repr::Src("where"),
            Self::While => Repr::Src("while"),
            Self::Whitespace => Repr::Tag("whitespace"),
            Self::WideArrow => Repr::Src("=>"),
            Self::Yield => Repr::Src("yield"),
        }
    }
}

pub(crate) enum Repr {
    Src(&'static str),
    Tag(&'static str),
}
